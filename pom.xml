<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>pl.slawas</groupId>
	<artifactId>ccrto-openapi</artifactId>
	<version>1.2-SNAPSHOT</version>
	<name>Context and Case Request Transportable Objects Open API</name>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<standard.acronym>CCRTO</standard.acronym>
		<schema.version>1.0</schema.version>
		<jackson.databind.version>[2.8.11.1,)</jackson.databind.version>
		<jackson.annotations.version>2.5.0</jackson.annotations.version>
		<slf4j.version>1.5.2</slf4j.version>
		<org.eclipse.persistence.moxy.version>2.7.3-RC1</org.eclipse.persistence.moxy.version>
		<sccommon-utils.version>1.0.7</sccommon-utils.version>
		
		<!-- The destination file for the code coverage report has to be set to the same value
         in the parent pom and in each module pom. Then JaCoCo will add up information in
         the same report, so that, it will give the cross-module code coverage. -->
		<sonar.jacoco.reportPaths>${local-project-workspace-path}/mercury/target/jacoco-it.exec</sonar.jacoco.reportPaths>
		<jacoco.outputDirectory>${local-project-workspace-path}/mercury/target/jacoco-ut</jacoco.outputDirectory>
		<jmxArgLine></jmxArgLine>
		<additionalArgLine>${jmxArgLine} -Djavax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory</additionalArgLine>
	</properties>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>
	<url>http://scisoftware.pl/${standard.acronym}/${schema.version}</url>

	<developers>
		<developer>
			<id>slawas</id>
			<name>Sławomir Cichy</name>
			<email>slawas@slawas.pl</email>
			<roles>
				<role>developer</role>
				<role>manager</role>
			</roles>
			<url>
				http://slawas.pl
			</url>
			<timezone>+1</timezone>
		</developer>
	</developers>

	<organization>
		<name>Sci Software</name>
		<url>http://scisoftware.pl</url>
	</organization>

	<distributionManagement>
		<repository>
			<id>github</id>
			<name>GitHub slawascichy Apache Maven Packages</name>
			<url>https://maven.pkg.github.com/slawascichy/ccrto-openapi</url>
		</repository>
	</distributionManagement>

	<build>
		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-webdav</artifactId>
				<version>1.0-beta-2</version>
			</extension>
		</extensions>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.3</version>
				<executions>
					<!-- pre-unit-test execution helps setting up some maven property, which 
						will be used later by JaCoCo -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${sonar.jacoco.reportPaths}</destFile>
							<!-- passing property which will contains settings for JaCoCo agent. 
								If not specified, then "argLine" would be used for "jar" packaging -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- report phase setup -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- output file with report data. -->
							<dataFile>${sonar.jacoco.reportPaths}</dataFile>
							<!-- output directory for the reports. -->
							<outputDirectory>${jacoco.outputDirectory}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.14.1</version>
				<executions>
					<execution>
						<id>default-test</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<argLine>${additionalArgLine} ${surefireArgLine}</argLine>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<argLine>${additionalArgLine}</argLine>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<outputEncoding>UTF-8</outputEncoding>
				</configuration>
				<dependencies>
					<dependency><!-- add support for ssh/scp -->
						<groupId>org.apache.maven.wagon</groupId>
						<artifactId>wagon-ssh</artifactId>
						<version>1.0</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<!-- Plugin służący do czytania properties z pliku pom i mapowania folderu 
					java-templates(katalog ustawiany domyślnie) w celu przypisania właściwości 
					stałym -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>templating-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>filter-src</id>
						<goals>
							<goal>filter-sources</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<resources>
			<!-- To jest akcja Eclipse!! - START -->
			<!-- Obsługa wygenerowanych przez exec-maven-plugin kodów zródłowych -->
			<resource>
				<directory>src/main/java-templates</directory>
				<filtering>true</filtering>
			</resource>
			<!-- To jest akcja Eclipse!! - KONIEC -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
			</resource>
		</resources>
	</build>

	<dependencies>
		<!-- Jackson JSON Processor -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>pl.slawas.sccommon</groupId>
			<artifactId>sccommon-utils</artifactId>
			<version>${sccommon-utils.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.3</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.databind.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.moxy</artifactId>
			<version>${org.eclipse.persistence.moxy.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.eclipse.persistence</groupId>
					<artifactId>commonj.sdo</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.json</groupId>
					<artifactId>javax.json-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>
</project>
